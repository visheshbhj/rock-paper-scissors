<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@2.0.0/dist/tf.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>

    <script type="application/javascript" src="js/index.js"></script>
    <link href="css/index.css" rel="stylesheet" ></link>
    <title></title>
</head>

<body>
    <article id="welcome-window">
        <section id="welcome-menu">
            <button onclick="onThemeChange()">Dark Mode</button>
        </section>
        <section id="welcome-logo">

        </section>
    </article>
</body>
</html>



/**
 *  On Document Load
 */
$(document).ready(() => {
    if(getTheme()){ // Do We need Dark Theme if false => No Darkness else => darkness
        setDarkTheme();
    }else{
        setLightTheme();
    }
});

function onThemeChange(){
    window.localStorage.setItem('theme',!getTheme());
    document.body.style.transition = "background 2s";
    if (getTheme()) {
        setDarkTheme()
    }else {
        setLightTheme()
    }
}

function getTheme(){
    switch (window.localStorage.getItem('theme')) {
        case "true":
            theme = true;
            break;
        case "false":
            theme = false;
            break;
        default:
            theme = false;
            break;
    }
    return theme;
}

function setDarkTheme(){
    document.body.style.setProperty('--darkest','#b0a565')
    document.body.style.setProperty('--dark','#383a56')
    document.body.style.setProperty('--light','#2f3032')
    document.body.style.setProperty('--lightest','#ede68a')
}

function setLightTheme(){
    document.body.style.setProperty('--darkest','#49463d')
    document.body.style.setProperty('--dark','#aea995')
    document.body.style.setProperty('--light','#cac5af')
    document.body.style.setProperty('--lightest','#d3cdb5')
}



const express = require('express');
const app = express();
const http = require('http').Server(app);
const io = require('socket.io')(http);
const tf = require('@tensorflow/tfjs-node');
const port = process.env.PORT || 3000;

app.use(express.static(__dirname));

var model;
var IMAGE_SET = 50
const custom = tf.sequential();

var rock_set = [],paper_set = [],scissors_set =[],dataset = [];

io.on('connection',(socket)=>{
  socket.on('video-source',(msg) => {
    //tensor = imgTransform(msg)
    console.log(typeof msg)
    /* prediction = model.predict(msg.reshape([1,150,150,3]));
    console.log(prediction.print())
    prediction.argMax(1).data().then(value => {console.log('Pred ->'+value+' --- '+value[0]);socket.emit('prediction',value[0]);}); */
  });

  socket.on('video-source-rock',(msg) => {
    if(rock_set.length < IMAGE_SET){
      rock_set.push(imgTransform(msg))
    }else{
      socket.emit('data-load-end')
    }
  });
  socket.on('video-source-paper',(msg) => {
    if(paper_set.length < IMAGE_SET){
      paper_set.push(imgTransform(msg))
    }else{
      socket.emit('data-load-end')
    }
  });
  socket.on('video-source-scissors',(msg) => {
    if(scissors_set.length < IMAGE_SET){
      scissors_set.push(imgTransform(msg))
    }else{
      socket.emit('data-load-end')
    }
  });
  socket.on('train',(msg) => {
    /**Process Data */
    for (var s=0;s<3;s++){
      for(i = 0;i<IMAGE_SET;i++){
        if(s == 0){
          dataset.push({
            xs: rock_set[i],
            ys: tf.Tensor([s])
          })
        }
        if(s == 1){
          dataset.push({
            xs: paper_set[i],
            ys: tf.Tensor([s])
          })
        }
        if(s == 2){
          dataset.push({
            xs: scissors_set[i],
            ys: tf.Tensor([s])
          })
        }
      }
    }
    custom.compile({loss:'sparseCategoricalCrossentropy',optimizer:tf.train.rmsprop(0.001),metrics :['accuracy']})
    custom.fitDataset(tf.data.array(dataset).batch(4), {epochs:5}).then((completer) => {console.log('accuracy '+completer.history['accuracy']); socket.emit('training-complete')}).catch(err => console.log(err));
  });
});


http.listen(port, () => {
  tf.loadLayersModel('file://js/tensorflow_model/model.json').then(resp => model = resp).catch(err => console.log('Load Model Error => '+err));
  layers()
  console.log(`Socket.IO server running at http://localhost:${port}/`);
});

function layers(){
  custom.add(tf.layers.conv2d({inputShape : [150,150,3],filters : 64,kernelSize : 3,activation :'relu'}));
  custom.add(tf.layers.maxPooling2d({poolSize : [2, 2] ,strides:[2, 2]}))
  custom.add(tf.layers.conv2d({filters : 64,kernelSize : 3,activation :'relu'}))
  custom.add(tf.layers.maxPooling2d({poolSize : [2, 2] ,strides:[2, 2]}))
  custom.add(tf.layers.conv2d({filters : 128,kernelSize : 3,activation :'relu'}))
  custom.add(tf.layers.maxPooling2d({poolSize : [2, 2] ,strides:[2, 2]}))
  custom.add(tf.layers.conv2d({filters : 128,kernelSize : 3,activation :'relu'}))
  custom.add(tf.layers.maxPooling2d({poolSize : [2, 2] ,strides:[2, 2]}))
  custom.add(tf.layers.flatten())
  custom.add(tf.layers.dropout({rate:0.5}))
  custom.add(tf.layers.dense({units:512,activation:'relu'}))
  custom.add(tf.layers.dense({units:3,activation:'softmax'}))
}

function imgTransform(img){
  //img = tf.image.resizeBilinear(img, [224, 224]).div(tf.scalar(255))
  img = tf.node.decodePng(img,3).div(tf.scalar(255))
  //img = tf.cast(img, dtype = 'float32');

  /*mean of natural image*/
 //let meanRgb = {  red : 0.485,  green: 0.456,  blue: 0.406 }

 /* standard deviation of natural image*/
 //let stdRgb = { red: 0.229,  green: 0.224,  blue: 0.225 }

  /* let indices = [
              tf.tensor1d([0], "int32"),
              tf.tensor1d([1], "int32"),
              tf.tensor1d([2], "int32")
  ]; */

 /* sperating tensor channelwise and applyin normalization to each chanel seperately */
 /* let centeredRgb = {
     red: tf.gather(img,indices[0],2)
              .sub(tf.scalar(meanRgb.red))
              .div(tf.scalar(stdRgb.red))
              .reshape([150,150]),
     
     green: tf.gather(img,indices[1],2)
              .sub(tf.scalar(meanRgb.green))
              .div(tf.scalar(stdRgb.green))
              .reshape([150,150]),
     
     blue: tf.gather(img,indices[2],2)
              .sub(tf.scalar(meanRgb.blue))
              .div(tf.scalar(stdRgb.blue))
              .reshape([150,150]),
 } */


  /* combining seperate normalized channels*/
  //let processedImg = tf.stack([centeredRgb.red, centeredRgb.green, centeredRgb.blue]).expandDims();
  //let processedImg = tf.stack([centeredRgb.red, centeredRgb.green, centeredRgb.blue]);
 //return processedImg.reshape([1,150,150,3]);
 console.log('shape:', img.shape);

 return img;
}